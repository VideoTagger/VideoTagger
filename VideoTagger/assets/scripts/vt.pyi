from abc import ABCMeta, abstractmethod
from typing import List, Optional, Tuple

class Script(metaclass=ABCMeta):
    def __init__(self: Script) -> None: ...
    @abstractmethod
    def has_progress(self: Script) -> bool: ...
    @abstractmethod
    def on_run(self: Script) -> None:
        """This method doesn't need to be implemented since it isn't purely virtual"""
        ...

    @property
    def progress(self: Script) -> float: ...
    @progress.setter
    def progress(self: Script, value: float) -> None: ...
    @property
    def progress_info(self: Script) -> str: ...
    @progress_info.setter
    def progress_info(self: Script, value: str) -> None: ...

class Timeline:
    def __repr__(self: Timeline) -> str: ...
    @property
    def segment_count(self: Timeline) -> int: ...

class Tag:
    def __init__(self: Tag, name: str, color: int) -> None:
        """color: uint32 formatted as 0xAABBGGRR"""
        ...
    name: str
    color: int

class TagStorage:
    def add_tag(self: TagStorage, tag: Tag) -> bool: ...
    def clear(self: TagStorage) -> None: ...
    @property
    def list(self: TagStorage) -> List[Tag]: ...

class Video:
    @property
    def id(self: Video) -> int: ...
    @property
    def path(self: Video) -> str: ...
    @property
    def size(self: Video) -> Tuple[int, int]: ...

class Project:
    @property
    def name(self: Project) -> str: ...
    @property
    def videos(self: Project) -> List[Video]: ...
    @property
    def tags(self: Project) -> TagStorage: ...

def current_project() -> Optional[Project]: ...

timeline: Timeline
