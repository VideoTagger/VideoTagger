from abc import ABCMeta, abstractmethod
from typing import List, Optional, Tuple
from enum import Enum

class Script(metaclass=ABCMeta):
    def __init__(self: Script) -> None: ...
    @abstractmethod
    def has_progress(self: Script) -> bool: ...
    @abstractmethod
    def on_run(self: Script) -> None:
        """This method doesn't need to be implemented since it isn't purely virtual"""
        ...

    @property
    def progress(self: Script) -> float: ...
    @progress.setter
    def progress(self: Script, value: float) -> None: ...
    @property
    def progress_info(self: Script) -> str: ...
    @progress_info.setter
    def progress_info(self: Script, value: str) -> None: ...

class Timestamp:
    def __init__(self: Timestamp, milliseconds: int) -> None: ...
    @property
    def hours(self: Timestamp) -> int: ...
    @property
    def minutes(self: Timestamp) -> int: ...
    @property
    def seconds(self: Timestamp) -> int: ...
    @property
    def milliseconds(self: Timestamp) -> int: ...
    def __lt__(self: Timestamp, other) -> bool: ...
    def __gt__(self: Timestamp, other) -> bool: ...
    def __le__(self: Timestamp, other) -> bool: ...
    def __ge__(self: Timestamp, other) -> bool: ...
    @property
    def total_milliseconds(self: Timestamp) -> int: ...
    @total_milliseconds.setter
    def total_milliseconds(self: Timestamp, value: int) -> None: ...

class Player:
    @property
    def current_timestamp(self: Player) -> Timestamp: ...
    def seek(self: Player, timestamp: Timestamp) -> None: ...
    def play(self: Player) -> None: ...
    def pause(self: Player) -> None: ...
    def set_playing(self: Player, value: bool) -> None: ...
    @property
    def is_playing(self: Player) -> bool: ...

class TagAttributeType(Enum):
    bool = 0
    float = 1
    integer = 2
    string = 3
    shape = 4

class TagAttribute:
    def __init__(self: TagAttribute, type: TagAttributeType) -> None: ...

class Vec2:
    def __init__(self: Vec2, x: int, y: int) -> None: ...
    @property
    def x(self: Vec2) -> int: ...
    @x.setter
    def x(self: Vec2) -> None: ...
    @property
    def y(self: Vec2) -> int: ...
    @y.setter
    def y(self: Vec2, value: int) -> None: ...
    def __eq__(self: Vec2, other) -> bool: ...

class Circle:
    def __init__(self: Circle, pos: Vec2, radius: int) -> None: ...
    pos: Vec2
    @property
    def radius(self: Circle) -> int: ...
    @radius.setter
    def radius(self: Circle, value: int) -> None: ...
    def __eq__(self: Circle, other) -> bool: ...

class Rectangle:
    def __init__(self: Rectangle, pos1: Vec2, pos2: Vec2) -> None: ...
    @property
    def pos1(self: Rectangle) -> Vec2: ...
    @pos1.setter
    def pos1(self: Rectangle, value: Vec2) -> None: ...
    @property
    def pos2(self: Rectangle) -> Vec2: ...
    @pos2.setter
    def pos2(self: Rectangle, value: Vec2) -> None: ...
    def __eq__(self: Rectangle, other) -> bool: ...

class Polygon:
    def __init__(self: Polygon, vertices: list[Vec2]) -> None: ...
    vertices: list[Vec2]
    def __eq__(self: Polygon, other) -> bool: ...

class TagAttributeInstance:
    def set_bool(self: TagAttributeInstance, value: bool) -> None: ...
    def set_float(self: TagAttributeInstance, value: float) -> None: ...
    def set_integer(self: TagAttributeInstance, value: int) -> None: ...
    def set_string(self: TagAttributeInstance, value: str) -> None: ...
    def set_circle(
        self: TagAttributeInstance, keyframe: Timestamp, circle: Circle
    ) -> None: ...
    def set_circle_regions(
        self: TagAttributeInstance, keyframes: dict[Timestamp, list[Circle]]
    ) -> None: ...
    def set_rectangle(
        self: TagAttributeInstance, keyframe: Timestamp, rect: Rectangle
    ) -> None: ...
    def set_rectangle_regions(
        self: TagAttributeInstance, keyframes: dict[Timestamp, list[Rectangle]]
    ) -> None: ...
    def set_polygon(
        self: TagAttributeInstance, keyframe: Timestamp, polygon: Polygon
    ) -> None: ...
    def set_polygon_regions(
        self: TagAttributeInstance, keyframes: dict[Timestamp, list[Polygon]]
    ) -> None: ...

class Tag:
    def __init__(self: Tag, name: str, color: int) -> None:
        """color: uint32 formatted as 0xAABBGGRR"""
        ...
    name: str
    color: int

    def add_attribute(self: Tag, name: str, type: TagAttributeType) -> TagAttribute: ...
    def remove_attribute(self: Tag, name: str) -> None: ...
    def has_attribute(self: Tag, name: str) -> bool: ...

class TagStorage:
    def add_tag(self: TagStorage, tag: Tag) -> bool: ...
    def has_tag(self: TagStorage, name: str) -> bool: ...
    def clear(self: TagStorage) -> None: ...
    @property
    def list(self: TagStorage) -> List[Tag]: ...

class Video:
    @property
    def id(self: Video) -> int: ...
    @property
    def path(self: Video) -> str: ...
    @property
    def size(self: Video) -> Tuple[int, int]: ...

class VideoInfo:
    @property
    def id(self: VideoInfo) -> int: ...
    @property
    def offset(self: VideoInfo) -> Timestamp: ...

class Segment:
    def get_attribute(
        self: Segment, video: Video, name: str
    ) -> TagAttributeInstance: ...
    @property
    def tag(self: Segment) -> Tag: ...
    @property
    def start(self: Segment) -> Timestamp: ...
    @property
    def end(self: Segment) -> Timestamp: ...

class VideoGroup:
    def __init__(self: VideoGroup, name: str) -> None: ...
    def add_video(self: VideoGroup, video: Video, offset: Timestamp) -> None: ...
    def add_timestamp(
        self: VideoGroup, tag: Tag, start: Timestamp
    ) -> Optional[Segment]: ...
    def add_segment(
        self: VideoGroup, tag: Tag, start: Timestamp, end: Timestamp
    ) -> Optional[Segment]: ...
    def get_segments(self: VideoGroup, tag: Tag) -> List[Segment]: ...
    @property
    def video_infos(self: VideoGroup) -> List[VideoInfo]: ...

    name: str

class GroupQueue:
    def add_group(self: GroupQueue, group: VideoGroup) -> bool: ...
    def current_group(self: GroupQueue) -> Optional[VideoGroup]: ...
    @property
    def groups(self: GroupQueue) -> List[VideoGroup]: ...

class Project:
    @property
    def name(self: Project) -> str: ...
    @property
    def videos(self: Project) -> List[Video]: ...
    @property
    def tags(self: Project) -> TagStorage: ...
    def import_video(self: Project, path: str) -> Optional[Video]: ...
    def remove_video(self: Project, video: Video) -> bool: ...
    def get_video(self: Project, id: int) -> Optional[Video]: ...
    def find_group(self: Project, name: str) -> Optional[VideoGroup]: ...
    def add_group(self: Project, group: VideoGroup) -> bool: ...
    @property
    def group_queue(self: Project) -> GroupQueue: ...

def current_project() -> Optional[Project]: ...
def random_color() -> int:
    """0xAABBGGRR"""
    ...

def to_abgr(argb: int) -> int: ...
def log(message: str) -> None: ...
def warn(message: str) -> None: ...
def error(message: str) -> None: ...

player: Player
